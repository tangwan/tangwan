<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangwan.github.io</id>
    <title>Devin&apos;s Blog</title>
    <updated>2023-08-11T07:16:36.457Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tangwan.github.io"/>
    <link rel="self" href="https://tangwan.github.io/atom.xml"/>
    <subtitle>博采众长才能相互印证，故步自封必将粗陋浅薄。</subtitle>
    <logo>https://tangwan.github.io/images/avatar.png</logo>
    <icon>https://tangwan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Devin&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[MySQL的MVCC]]></title>
        <id>https://tangwan.github.io/post/mysql-de-mvcc/</id>
        <link href="https://tangwan.github.io/post/mysql-de-mvcc/">
        </link>
        <updated>2023-08-08T06:32:44.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL的MVCC（多版本并发控制）是一种用于处理并发读写操作的机制。它允许多个事务同时读取数据库的一致性视图，而不会相互干扰或产生冲突。</p>
<p>MVCC的原理可以简单地描述为以下几个要点：</p>
<ol>
<li>每行数据都有一个版本号：在更新数据时，MySQL会为每一行数据分配一个唯一的版本号。这个版本号用于标识数据的修改历史。</li>
<li>读取操作使用快照：当一个事务开始时，它会创建一个快照，记录当前数据库的状态。这个快照包含了事务开始时的所有数据版本号。</li>
<li>读取操作不会阻塞写入操作：当一个事务在读取数据时，即使其他事务正在修改同一行数据，也不会发生阻塞。读取操作会使用快照来获取一致性的数据视图。</li>
<li>写入操作使用行级锁：当一个事务开始修改数据时，MySQL会为相关的行加上行级锁，防止其他事务同时修改同一行数据。这样可以保证数据的一致性和并发性。</li>
<li>事务的隔离级别影响MVCC：MySQL的事务隔离级别（如读未提交、读已提交、可重复读、串行化）会影响MVCC的行为。不同的隔离级别会决定事务能够看到的数据版本范围。</li>
</ol>
<p>通过MVCC机制，MySQL能够在高并发的情况下提供读写操作的并发性和一致性。它允许事务读取一致性的数据视图，而不会被其他事务的并发修改所干扰。这种机制对于处理并发访问数据库的应用程序非常重要。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[清理Mac鼠标右键打开方式中的重复项]]></title>
        <id>https://tangwan.github.io/post/qing-li-mac-shu-biao-you-jian-da-kai-fang-shi-zhong-de-chong-fu-xiang/</id>
        <link href="https://tangwan.github.io/post/qing-li-mac-shu-biao-you-jian-da-kai-fang-shi-zhong-de-chong-fu-xiang/">
        </link>
        <updated>2023-08-02T05:56:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题简介">问题简介</h2>
<p>Edge浏览器升级后，鼠标右键的打开方式中出现了2个Edge，两个图标后面跟了小版本号，但其实电脑只有一个Edge浏览器，其实是打开同一个浏览器。</p>
<h2 id="解决办法">解决办法</h2>
<p>这个问题目前很常见，想要解决这个问题也很简单，只需要一段终端命令，重建该列表就行了。<br>
打开OS X自带的【终端】(可用Spotlight搜索找到)，复制粘贴以下命令并回车：</p>
<pre><code class="language-shell">/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo “Open With has been rebuilt, Finder will relaunch
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用jdk8请求https的url报错PKIX path building failed]]></title>
        <id>https://tangwan.github.io/post/shi-yong-jdk8-qing-qiu-https-de-url-bao-cuo-pkix-path-building-failed/</id>
        <link href="https://tangwan.github.io/post/shi-yong-jdk8-qing-qiu-https-de-url-bao-cuo-pkix-path-building-failed/">
        </link>
        <updated>2023-08-01T05:50:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="报错内容">报错内容</h2>
<pre><code class="language-java">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification pa
th to requested target
at sun.security.ssl.Alert.createSSLException(Alert.java:131)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:370)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:313)
at sun.security.ssl.TransportContext.fatal(TransportContext.java:308)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:652)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.onCertificate(CertificateMessage.java:471)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.consume(CertificateMessage.java:367)
at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:376)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:479)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:457)
at sun.security.ssl.TransportContext.dispatch(TransportContext.java:200)
at sun.security.ssl.SSLTransport.decode(SSLTransport.java:155)
at sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1320)
at sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1233)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:417)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:389)
at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:558)
at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:201)
at sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:167)
at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:732)
at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:707)
at org.jsoup.helper.HttpConnection.execute(HttpConnection.java:297)
at org.jsoup.helper.HttpConnection.get(HttpConnection.java:286)
at com.duliday.spider.service.impl.AdministrativeDivisionManager.export(AdministrativeDivisionManager.java:50)
at com.duliday.spider.service.impl.AdministrativeDivisionManager$$FastClassBySpringCGLIB$$23edeb39.invoke(&lt;generated&gt;)
at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
at com.duliday.spider.service.impl.AdministrativeDivisionManager$$EnhancerBySpringCGLIB$$d74be86b.export(&lt;generated&gt;)
at com.duliday.spider.controller.AdministrativeDivisionController.export(AdministrativeDivisionController.java:29)
at com.duliday.spider.controller.AdministrativeDivisionController$$FastClassBySpringCGLIB$$9094180d.invoke(&lt;generated&gt;)
at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
at com.duliday.common.advice.RequestLogAdvice.around(RequestLogAdvice.java:42)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
at com.duliday.spider.controller.AdministrativeDivisionController$$EnhancerBySpringCGLIB$$a8ae852f.export(&lt;generated&gt;)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at com.duliday.common.advice.CrossFilter.doFilter(CrossFilter.java:30)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:93)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
at java.lang.Thread.run(Thread.java:750)
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:439)
at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:306)
at sun.security.validator.Validator.validate(Validator.java:271)
at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:312)
at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:221)
at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:128)
at sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:636)
... 112 common frames omitted
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:434)
... 118 common frames omitted
</code></pre>
<h2 id="mac下解决办法">Mac下解决办法</h2>
<ol>
<li>Chrome下载网站的证书</li>
<li>使用命令导入证书</li>
<li>重启IDEA、重启应用</li>
</ol>
<pre><code class="language-shell">sudo keytool -import -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_361.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias xxxcert -file ~/Downloads/xxx.cer
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://s2.loli.net/2023/08/11/Dwtn14EqZrY5FHM.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LinkedHashMap 使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序]]></title>
        <id>https://tangwan.github.io/post/linkedhashmap-shi-yong-shuang-xiang-lian-biao-lai-wei-hu-yuan-su-de-shun-xu-shun-xu-wei-cha-ru-shun-xu-huo-zhe-zui-jin-zui-shao-shi-yong-lrushun-xu/</id>
        <link href="https://tangwan.github.io/post/linkedhashmap-shi-yong-shuang-xiang-lian-biao-lai-wei-hu-yuan-su-de-shun-xu-shun-xu-wei-cha-ru-shun-xu-huo-zhe-zui-jin-zui-shao-shi-yong-lrushun-xu/">
        </link>
        <updated>2023-08-01T05:38:42.000Z</updated>
        <content type="html"><![CDATA[<p>在 Java 的 LinkedHashMap 中，元素的顺序是基于插入顺序或访问顺序来维护的，具体取决于构造 LinkedHashMap 对象时所使用的构造方法。</p>
<ul>
<li>
<p>默认情况下，LinkedHashMap 使用插入顺序来维护元素的顺序。这意味着元素会按照它们被插入到 LinkedHashMap 中的顺序进行迭代和访问。</p>
</li>
<li>
<p>当使用带有 accessOrder 参数的构造方法时，LinkedHashMap 将使用访问顺序来维护元素的顺序。<br>
通过将 accessOrder 参数设置为 true，你可以启用访问顺序。在访问顺序模式下，每次访问一个元素（包括获取或更新操作）会将该元素移到链表末尾，使得最近访问的元素位于链表末尾。</p>
</li>
</ul>
<p>需要注意的是，无论使用插入顺序还是访问顺序，LinkedHashMap 内部都使用哈希表来存储键值对。<br>
链表结构只是用来维护元素的顺序。</p>
<p>以下是一个示例：</p>
<pre><code class="language-java">import java.util.LinkedHashMap;

public class LinkedHashMapExample {
public static void main(String[] args) {
// 使用插入顺序创建 LinkedHashMap
LinkedHashMap&lt;Integer, String&gt; linkedHashMap = new LinkedHashMap&lt;&gt;();

        linkedHashMap.put(3, &quot;C&quot;);
        linkedHashMap.put(1, &quot;A&quot;);
        linkedHashMap.put(2, &quot;B&quot;);

        System.out.println(linkedHashMap); // 输出：{3=C, 1=A, 2=B}

        // 使用访问顺序创建 LinkedHashMap
        LinkedHashMap&lt;Integer, String&gt; accessOrderedMap = new LinkedHashMap&lt;&gt;(16, 0.75f, true);

        accessOrderedMap.put(3, &quot;C&quot;);
        accessOrderedMap.put(1, &quot;A&quot;);
        accessOrderedMap.put(2, &quot;B&quot;);

        System.out.println(accessOrderedMap); // 输出：{3=C, 1=A, 2=B}

        // 进行一些访问操作
        accessOrderedMap.get(2);
        accessOrderedMap.get(1);

        System.out.println(accessOrderedMap); // 输出：{3=C,  2=B, 1=A}
    }
}
</code></pre>
<p>在上述示例中，第一个 LinkedHashMap 使用插入顺序，元素的顺序与插入顺序相同。<br>
第二个 LinkedHashMap 启用了访问顺序，通过访问键为 1 和 2 的元素，这两个元素被移到链表末尾，<br>
因此输出结果：{3=C, 2=B, 1=A}。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用python3 Pillow库对图片进行批量压缩]]></title>
        <id>https://tangwan.github.io/post/shi-yong-python3-pillow-ku-dui-tu-pian-jin-xing-pi-liang-ya-suo/</id>
        <link href="https://tangwan.github.io/post/shi-yong-python3-pillow-ku-dui-tu-pian-jin-xing-pi-liang-ya-suo/">
        </link>
        <updated>2023-07-28T05:44:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="步骤">步骤</h2>
<ul>
<li>需要修改原始图片目录</li>
<li>需要修改压缩后输出图片目录</li>
<li>自行修改压缩比例，示例代码这里是压缩到原尺寸1半</li>
</ul>
<h2 id="安装依赖库">安装依赖库</h2>
<pre><code class="language-shell">pip install Pillow
</code></pre>
<h2 id="修改参数执行代码">修改参数执行代码</h2>
<pre><code class="language-python">import os
from PIL import Image
import shutil

# Folder containing images to compress
input_folder = '/Users/tangwan/Downloads/Picture'

# Folder to save compressed images
output_folder = '/Users/tangwan/Downloads/Picture2'

if not os.path.exists(output_folder):
os.makedirs(output_folder)

for filename in os.listdir(input_folder):
if filename.endswith('.jpg') or filename.endswith('.jpeg') or filename.endswith('.png'):
image_path = os.path.join(input_folder, filename)
image = Image.open(image_path)

        # Compress image , set ratio and quality
        resized_image = image.resize(tuple(x // 2 for x in image.size))
        resized_image.save(os.path.join(output_folder, filename), optimize=True, quality=80)

        #Copy image metadata
        shutil.copystat(image_path, os.path.join(output_folder, filename))

print('Images compressed successfully!')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java中强引用，弱引用，软引用，虚引用区别]]></title>
        <id>https://tangwan.github.io/post/java-zhong-qiang-yin-yong-ruo-yin-yong-ruan-yin-yong-xu-yin-yong-qu-bie/</id>
        <link href="https://tangwan.github.io/post/java-zhong-qiang-yin-yong-ruo-yin-yong-ruan-yin-yong-xu-yin-yong-qu-bie/">
        </link>
        <updated>2021-08-12T05:34:39.000Z</updated>
        <content type="html"><![CDATA[<p>在Java中，强引用、弱引用、软引用和虚引用是用于描述对象引用强度的概念。它们之间的区别如下：</p>
<h2 id="强引用strong-reference">强引用（Strong Reference）</h2>
<p>强引用是最常见的引用类型。当一个对象具有强引用时，垃圾回收器不会回收该对象。只有当该对象没有任何强引用时，才会被判定为可回收的垃圾对象。</p>
<p>示例：</p>
<pre><code class="language-java">Object obj = new Object(); // 强引用
</code></pre>
<h2 id="弱引用weak-reference">弱引用（Weak Reference）</h2>
<p>弱引用是一种比较弱的引用类型。当一个对象只有弱引用时，垃圾回收器在进行垃圾回收时会立即回收该对象。弱引用通常用于实现缓存、观察者模式等场景。</p>
<p>示例：</p>
<pre><code class="language-java">WeakReference&lt;Object&gt; weakRef = new WeakReference&lt;&gt;(obj); // 弱引用
</code></pre>
<h2 id="软引用soft-reference">软引用（Soft Reference）</h2>
<p>软引用是介于强引用和弱引用之间的引用类型。当内存不足时，垃圾回收器会尝试回收软引用对象。与弱引用不同的是，软引用在回收之前会尽可能保持对象存活，只有当内存不足时才会被回收。</p>
<p>示例：</p>
<pre><code class="language-java">SoftReference&lt;Object&gt; softRef = new SoftReference&lt;&gt;(obj); // 软引用
</code></pre>
<h2 id="虚引用phantom-reference">虚引用（Phantom Reference）</h2>
<p>虚引用是最弱的引用类型。虚引用的存在主要是为了跟踪对象被垃圾回收的状态。虚引用无法通过引用获取对象，也无法通过虚引用进行对象的操作。它主要用于在对象被回收时收到系统通知或执行特定的清理操作。</p>
<p>示例：</p>
<pre><code class="language-java">PhantomReference&lt;Object&gt; phantomRef = new PhantomReference&lt;&gt;(obj, referenceQueue); // 虚引用
</code></pre>
<h2 id="总结">总结：</h2>
<p>强引用是最常见的引用类型，只有当没有任何强引用指向一个对象时，对象才会被回收。<br>
弱引用在垃圾回收时会被立即回收。<br>
软引用在内存不足时才会被回收，用于实现缓存等场景。<br>
虚引用无法通过引用获取对象，主要用于跟踪对象被垃圾回收的状态。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac Homebrew安装使用更换国内镜像]]></title>
        <id>https://tangwan.github.io/post/mac-homebrew-an-zhuang-shi-yong-geng-huan-guo-nei-jing-xiang/</id>
        <link href="https://tangwan.github.io/post/mac-homebrew-an-zhuang-shi-yong-geng-huan-guo-nei-jing-xiang/">
        </link>
        <updated>2021-08-11T04:33:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Homebrew工具可以看作是mac上的软件包管理器,类似于<code>yum</code>之于<code>centos或redhat</code>和<code>apt-get</code>之于<code>ubuntu</code>，安装软件包会自动安装依赖的软件包，Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 和 linux 系统上的软件安装过程。它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简单的一条指令，就可以实现包管理，十分方便快捷。<code>Homebrew</code> 主要有四个部分组成: <code>brew</code>、<code>homebrew-core</code> 、<code>homebrew-bottles</code>、<code>homebrew-cask</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">brew</td>
<td style="text-align:left">Homebrew 源代码仓库</td>
</tr>
<tr>
<td style="text-align:left">homebrew-core</td>
<td style="text-align:left">Homebrew 核心软件仓库</td>
</tr>
<tr>
<td style="text-align:left">homebrew-bottles</td>
<td style="text-align:left">Homebrew 预编译二进制软件包</td>
</tr>
<tr>
<td style="text-align:left">homebrew-cask</td>
<td style="text-align:left">提供 macOS 应用和大型二进制文件</td>
</tr>
</tbody>
</table>
<h2 id="安装">安装</h2>
<p>安装homebrew只需要一个命令,可以查看网站，<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p>
<p><a href="https://github.com/Homebrew">Homebrew GitHub所有仓库地址，https://github.com/Homebrew</a></p>
<p><a href="https://gitee.com/brew-cn">Homebrew Gitee所有仓库地址，https://gitee.com/brew-cn</a></p>
<p><a href="https://mirrors.ustc.edu.cn/">Homebrew 中科大所有仓库地址，搜索brew，https://mirrors.ustc.edu.cn</a></p>
<p><a href="https://mirrors.aliyun.com/homebrew/">Homebrew 阿里源所有仓库地址，https://mirrors.aliyun.com/homebrew/</a></p>
<p><a href="https://mirrors.cloud.tencent.com/homebrew/">Homebrew 腾讯源所有仓库地址，https://mirrors.cloud.tencent.com/homebrew/</a></p>
<p>这么多源随意选一个就可以，网上有些清华大学的源现在好像已经访问不了了，上面的源大家可以收藏一下以备不时之需</p>
<pre><code class="language-shell"># 需要能连接github,国内用户可能会很卡
$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

# 可以使用国内代理镜像,国内镜像较多,gitee半小时同步一次github代码库,下面以码云gitee为例
$ curl -sL https://gitee.com/brew-cn/use-brew-cn/raw/master/install.sh | bash -
</code></pre>
<p>安装完成后执行下面命令验证命令是否正常，默认安装位置在<code>/usr/local/Homebrew</code></p>
<pre><code class="language-shell">$ brew --version
</code></pre>
<h2 id="更换国内源">更换国内源</h2>
<p>使用<code>brew</code>安装软件默认从github来下载软件，国内不太稳定，我们可以更换brew下载源为国内的源加速软件安装过程，这里随便选一个吧，我就选阿里的源吧，毕竟大公司不差钱，线路稳定。替换源就是替换默认的<code>brew</code>、<code>brew-core</code>、<code>brew-cast</code>关联的仓库和<code>homebrew-bottles</code>二进制包下载地址。</p>
<pre><code class="language-shell"># 这些仓库默认都是关联的github仓库地址，三个仓库位置可以用下面三个命令查看
$ echo $(brew --repo)
$ echo $(brew --repo homebrew/core)
$ echo $(brew --repo homebrew/cask)
# 查看默认关联的仓库地址
$ cd $(brew --repo)
$ git remote -v

# 修改这三个仓库关联远程url
$ git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
$ git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
$ git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-cask.git

# 替换homebrew-bottles二进制包下载地址为国内地址，就是新增环境变量，如果你已经有了就vim编辑替换url即可
# 如果你使用zsh
$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc
$ source ~/.zshrc

# 如果你使用bash
$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile

# 刷新源
brew update

# 还原为默认的github源
$ git -C &quot;$(brew --repo)&quot; remote set-url origin https://github.com/Homebrew/brew.git
$ git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/homebrew-core.git
$ git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git
# 找到 ~/.bash_profile 或者 ~/.zshrc 中的HOMEBREW_BOTTLE_DOMAIN 一行删除
$ brew update
</code></pre>
<h2 id="使用">使用</h2>
<pre><code class="language-shell">$ brew --help		#查看帮助
$ man brew		#查看使用手册

# 常用命令
$ brew list		#查看已安装的二进制包和桌面应用，Casks为桌面应用列表，Formulae为二进制包列表
# 安装桌面软件
$ brew search another-redis	#搜索软件名称
$ brew install another-redis-desktop-manager	#安装redis一个优秀的GUI客户端
$ brew reinstall another-redis-desktop-manager	#重新安装
$ brew upgrade another-redis-desktop-manager	#更新已软件

# 安装非桌面软件
git --version	#查看现在的git版本
$ brew install git	#安装最新版git
$ brew link git	#把brew安装的git软链到/usr/local/bin/git
$ git --version	#查看现在的git版本

# 其他一些常用命令
$ brew update 	#更新所有已安装的依赖包含homebrew自己
$ brew uninstall xxx1 xxx2	#卸载软件xxx1和xxx2
$ brew list  xxx	#查看xxx软件的安装位置,不带xxx软件名将列出所有已安装软件
$ brew info git		#查看安装的git详细信息，包含依赖的安装项
$ brew config			#查看当前brew的配置，包含设置的源
$ brew doctor			#检查brew的一些问题，会给出修复建议命令
$ brew cleanup		#清理一些过期的链接之类的
$ brew install --verbose --debug FORMULA|CASK	#debug安装模式，软件安装出错时可debug安装查看日志
$ brew unlink -n git	#查看如果取消软链，哪些文件将被取消软链，-n代表尝试执行，非真正执行

# 开发者工具，用对应的命令+ --help查看用法
$ brew create URL [--no-fetch]	#把自己开发的软件包打成brew安装包
$ brew edit [FORMULA|CASK...]

# 更多支持的命令
$ brew commands

</code></pre>
<figure data-type="image" tabindex="1"><img src="https://files.ppznet.com/devTools/images/202111062054929.png" alt="image-20211106205402765" loading="lazy"></figure>
<h2 id="参考文档">参考文档</h2>
<blockquote>
<p><a href="https://docs.brew.sh/Formula-Cookbook">Homebrew Documentation</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/351199589">brew update 更新时 shallow clone</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1614039">Mac下brew切换为国内源</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew / Linuxbrew 镜像使用帮助</a></p>
<p><a href="https://blog.csdn.net/sexyluna/article/details/115587659">解决终端compinit:503: no such file or directory: /usr/local/share/zsh/site-functions/_brew_cask</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java公平锁和非公平锁区别]]></title>
        <id>https://tangwan.github.io/post/java-gong-ping-suo-he-fei-gong-ping-suo-qu-bie/</id>
        <link href="https://tangwan.github.io/post/java-gong-ping-suo-he-fei-gong-ping-suo-qu-bie/">
        </link>
        <updated>2021-08-10T05:29:00.000Z</updated>
        <content type="html"><![CDATA[<p>在Java中，公平锁（Fair Lock）和非公平锁（Nonfair Lock）是用于控制多线程并发访问的锁类型。<br>
它们之间的区别如下：</p>
<h2 id="公平锁">公平锁</h2>
<p>公平锁是指多个线程按照申请锁的顺序来获取锁，即先到先得的原则。<br>
当一个线程释放锁后，等待时间最长的线程将获得锁的访问权。<br>
公平锁的优点是保证了锁的公平性，避免了饥饿现象，所有线程都有机会获取到锁。<br>
但是，公平锁的实现会增加系统的开销，因为需要维护一个线程队列来记录等待锁的线程。</p>
<p>示例：</p>
<pre><code class="language-java">Lock fairLock = new ReentrantLock(true); // 公平锁
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://s2.loli.net/2023/08/01/EuAwhFmkctQYRv2.png" alt="" loading="lazy"></figure>
<h2 id="非公平锁">非公平锁</h2>
<p>非公平锁是指多个线程获取锁的顺序是不确定的，获取锁的机会是随机分配的。<br>
当一个线程释放锁后，下一个获取锁的线程可能是刚刚释放锁的线程，也可能是其他已经在等待队列中的线程。<br>
如果插队线程没有获取到锁，也会进入等待队列排队。非公平锁的优点是可以减少系统开销。<br>
但是，非公平锁可能导致某些线程长时间无法获取到锁，造成饥饿现象。</p>
<p>示例：</p>
<pre><code class="language-java">Lock nonfairLock = new ReentrantLock(false); // 非公平锁
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://s2.loli.net/2023/08/01/PmJ8UdhTe4F9GDb.png" alt="" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>公平锁按照线程申请锁的顺序来获取锁，保证了锁的公平性，但增加了系统开销。<br>
非公平锁的获取锁顺序是不确定的，可以减少系统开销，但可能导致某些线程长时间无法获取到锁。<br>
在性能要求较高的场景下，可以使用非公平锁。而在对锁的公平性要求较高的场景下，可以使用公平锁。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 线程sleep和wait区别]]></title>
        <id>https://tangwan.github.io/post/java-xian-cheng-sleep-he-wait-qu-bie/</id>
        <link href="https://tangwan.github.io/post/java-xian-cheng-sleep-he-wait-qu-bie/">
        </link>
        <updated>2021-08-07T06:14:29.000Z</updated>
        <content type="html"><![CDATA[<p>在Java中，有两种主要的方式来控制线程的暂停：通过Thread类的sleep()方法和通过线程对象的wait()方法。</p>
<ol>
<li><code>sleep()</code>方法：</li>
</ol>
<ul>
<li><code>Thread.sleep()</code>是Thread类的一个静态方法，用于使当前正在执行的线程暂停指定的时间。</li>
<li>调用<code>Thread.sleep()</code>方法会导致当前线程进入阻塞状态，释放CPU资源，但不会释放锁。</li>
<li><code>sleep()</code>方法抛出InterruptedException异常，需要进行异常处理。</li>
<li><code>sleep()</code>方法参数为毫秒数，可以精确控制线程的暂停时间。</li>
</ul>
<ol start="2">
<li><code>wait()</code>方法：</li>
</ol>
<ul>
<li><code>wait()</code>方法是Object类的实例方法，用于使当前线程进入等待状态，直到其他线程调用相同对象上的<code>notify()</code>或<code>notifyAll()</code>方法唤醒该线程。</li>
<li>调用<code>wait()</code>方法会导致当前线程释放对应对象的锁，并进入等待队列中等待被唤醒。</li>
<li>在调用<code>wait()</code>方法之前，必须先获得对象的锁，否则会抛出IllegalMonitorStateException异常。</li>
<li><code>wait()</code>方法必须在synchronized代码块内或方法内调用，因为它依赖于锁机制。</li>
</ul>
<p>综上所述，<code>sleep()</code>方法用于暂停当前线程一段时间，而<code>wait()</code>方法用于等待其他线程通知并唤醒。<code>sleep()</code>不会释放锁，而<code>wait()</code><br>
会释放锁并进入等待队列。另外，<code>wait()</code>方法需要在synchronized块中调用，而<code>sleep()</code>方法则不需要。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java的ASM是什么技术]]></title>
        <id>https://tangwan.github.io/post/java-de-asm-shi-shi-me-ji-zhu/</id>
        <link href="https://tangwan.github.io/post/java-de-asm-shi-shi-me-ji-zhu/">
        </link>
        <updated>2021-08-06T06:13:01.000Z</updated>
        <content type="html"><![CDATA[<p>ASM（全称为：Abstract Syntax Model）是一个用于分析、修改以及生成Java字节码的库。它提供了一种方式来动态地生成、转换和操作字节码，使开发人员能够在运行时修改Java类的行为。</p>
<p>ASM可以用于很多不同的应用场景，比如字节码增强、AOP（面向切面编程）、代码生成等。它可以让开发者直接操作字节码，从而更加灵活地控制程序的行为，并且在某些情况下可以提高性能。</p>
<p>与其他类似的字节码操作库相比，ASM的特点是轻量级和高性能。它的设计遵循了简单、可扩展、高效的原则，并且提供了丰富的API和组件，使得开发者可以方便地进行字节码分析和修改。</p>
<p>总结来说，ASM是一项技术，用于在Java字节码级别上对类进行分析和修改，提供了灵活、高效的手段来操作字节码。它在实现字节码增强、AOP等领域具有广泛的应用。</p>
]]></content>
    </entry>
</feed>